{"version":3,"sources":["components/password/password.js","ui/Page.jsx","App.js","serviceWorker.js","index.js"],"names":["generatePassword","length","options","characters","key","concat","password","lower","upper","digits","symbols","randomPassword","Page","props","Container","maxWidth","Paper","style","overflowWrap","Typography","variant","FormGroup","column","TextField","label","onChange","onChangeLength","FormControlLabel","control","Checkbox","name","color","checked","onChangeCheckbox","number","symbol","App","useState","setLength","setLower","setUpper","setNumber","setSymbol","setPassword","useEffect","e","target","Number","parseInt","value","isNaN","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9bef03f5.chunk.js","sourcesContent":["import password from \"secure-random-password\";\r\n\r\nconst generatePassword = (length, options) => {\r\n    if(options) {\r\n        let characters = [];\r\n        for(const key in options) {\r\n            if(key === 'lower') characters = characters.concat(password.lower)\r\n            if(key === 'upper') characters = characters.concat(password.upper)\r\n            if(key === 'number') characters = characters.concat(password.digits)\r\n            if(key === 'symbol') characters = characters.concat(password.symbols)\r\n        }\r\n        return password.randomPassword({ length, characters })\r\n    }\r\n    return password.randomPassword({ length })\r\n}\r\n\r\n\r\nexport default generatePassword;\r\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport const Page = props =>\r\n  <Container maxWidth='xs'>\r\n    <Paper>\r\n      <div style={{overflowWrap: 'break-word'}}>\r\n        <Typography variant='h5'>\r\n          {props.password}\r\n        </Typography>\r\n      </div>\r\n      <FormGroup column>\r\n        <TextField label='Length' onChange={props.onChangeLength} />\r\n        <FormControlLabel control={<Checkbox name='lower' color='primary' checked={props.lower} onChange={props.onChangeCheckbox} />} label='Lower' />\r\n        <FormControlLabel control={<Checkbox name='upper' color='primary' checked={props.upper} onChange={props.onChangeCheckbox} />} label='Upper' />\r\n        <FormControlLabel control={<Checkbox name='number' color='primary' checked={props.number} onChange={props.onChangeCheckbox} />} label='Number' />\r\n        <FormControlLabel control={<Checkbox name='symbol' color='primary' checked={props.symbol} onChange={props.onChangeCheckbox} />} label='Symbol' />\r\n      </FormGroup>\r\n    </Paper>\r\n  </Container>;\r\n\r\n  // LUEGO ESTILOS DE INSTALACION DE MATERIAL UI\r\n","import React, { useEffect, useState } from 'react';\nimport generatePassword from './components/password/password';\nimport { Page } from \"./ui/Page\";\n\nfunction App() {\n  const [length, setLength] = useState(8);\n  const [lower, setLower] = useState(false);\n  const [upper, setUpper] = useState(false);\n  const [number, setNumber] = useState(false);\n  const [symbol, setSymbol] = useState(false);\n\n  const [password, setPassword] = useState(generatePassword(length));\n\n  // On any change\n  useEffect(() => {\n    if (lower || upper || number || symbol) {\n      let characters = {};\n      if (lower) characters = { ...characters, lower: true };\n      if (upper) characters = { ...characters, upper: true };\n      if (number) characters = { ...characters, number: true };\n      if (symbol) characters = { ...characters, symbol: true };\n      setPassword(generatePassword(length, characters));\n    } else {\n      setPassword(generatePassword(length));\n    }\n  }, [lower, upper, number, symbol, length]);\n\n  const handleLength = e => {\n    let length = Number.parseInt(e.target.value);\n    if(isNaN(length))\n      setLength(4);\n    else if(length >= 4 && length <= 100)\n      setLength(length);\n  };\n\n  const handleCheckbox = e => {\n    const name = e.target.name;\n    if(name === 'lower') setLower(!lower);\n    if(name === 'upper') setUpper(!upper);\n    if(name === 'number') setNumber(!number);\n    if(name === 'symbol') setSymbol(!symbol);\n  }\n\n  return (\n    <Page password={password}\n          lower={lower} upper={upper} number={number} symbol={symbol} onChangeCheckbox={handleCheckbox}\n          length={length} onChangeLength={handleLength}  />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}